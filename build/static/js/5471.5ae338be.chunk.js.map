{"version":3,"file":"static/js/5471.5ae338be.chunk.js","mappings":"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","sources":["../node_modules/html-void-elements/index.js","../node_modules/hast-util-to-html/node_modules/hast-util-whitespace/index.js","../node_modules/hast-util-to-html/lib/omission/util/siblings.js","../node_modules/hast-util-to-html/lib/omission/omission.js","../node_modules/hast-util-to-html/lib/omission/closing.js","../node_modules/hast-util-to-html/lib/omission/opening.js","../node_modules/hast-util-to-html/lib/handle/element.js","../node_modules/hast-util-to-html/lib/handle/text.js","../node_modules/hast-util-to-html/lib/handle/index.js","../node_modules/hast-util-to-html/lib/handle/comment.js","../node_modules/hast-util-to-html/lib/handle/doctype.js","../node_modules/hast-util-to-html/lib/handle/raw.js","../node_modules/hast-util-to-html/lib/handle/root.js","../node_modules/hast-util-to-html/lib/index.js","../node_modules/rehype-stringify/lib/index.js"],"sourcesContent":["/**\n * List of HTML void tag names.\n *\n * @type {Array<string>}\n */\nexport const htmlVoidElements = [\n  'area',\n  'base',\n  'basefont',\n  'bgsound',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'frame',\n  'hr',\n  'image',\n  'img',\n  'input',\n  'isindex',\n  'keygen',\n  'link',\n  'menuitem',\n  'meta',\n  'nextid',\n  'param',\n  'source',\n  'track',\n  'wbr'\n]\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('../../types.js').Parent} Parent\n * @typedef {import('../../types.js').Content} Content\n */\n\nimport {whitespace} from 'hast-util-whitespace'\n\nexport const siblingAfter = siblings(1)\nexport const siblingBefore = siblings(-1)\n\n/**\n * Factory to check siblings in a direction.\n *\n * @param {number} increment\n */\nfunction siblings(increment) {\n  return sibling\n\n  /**\n   * Find applicable siblings in a direction.\n   *\n   * @param {Parent | null | undefined} parent\n   * @param {number | null | undefined} index\n   * @param {boolean | null | undefined} [includeWhitespace=false]\n   * @returns {Content}\n   */\n  function sibling(parent, index, includeWhitespace) {\n    const siblings = parent ? parent.children : []\n    let offset = (index || 0) + increment\n    let next = siblings && siblings[offset]\n\n    if (!includeWhitespace) {\n      while (next && whitespace(next)) {\n        offset += increment\n        next = siblings[offset]\n      }\n    }\n\n    return next\n  }\n}\n","/**\n * @typedef {import('../types.js').OmitHandle} OmitHandle\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Factory to check if a given node can have a tag omitted.\n *\n * @param {Record<string, OmitHandle>} handlers\n *   Omission handlers, where each key is a tag name, and each value is the\n *   corresponding handler.\n * @returns {OmitHandle}\n *   Whether to omit a tag of an element.\n */\nexport function omission(handlers) {\n  return omit\n\n  /**\n   * Check if a given node can have a tag omitted.\n   *\n   * @type {OmitHandle}\n   */\n  function omit(node, index, parent) {\n    return (\n      own.call(handlers, node.tagName) &&\n      handlers[node.tagName](node, index, parent)\n    )\n  }\n}\n","/**\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Parent} Parent\n */\n\nimport {whitespace} from 'hast-util-whitespace'\nimport {siblingAfter} from './util/siblings.js'\nimport {omission} from './omission.js'\n\nexport const closing = omission({\n  html,\n  head: headOrColgroupOrCaption,\n  body,\n  p,\n  li,\n  dt,\n  dd,\n  rt: rubyElement,\n  rp: rubyElement,\n  optgroup,\n  option,\n  menuitem,\n  colgroup: headOrColgroupOrCaption,\n  caption: headOrColgroupOrCaption,\n  thead,\n  tbody,\n  tfoot,\n  tr,\n  td: cells,\n  th: cells\n})\n\n/**\n * Macro for `</head>`, `</colgroup>`, and `</caption>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction headOrColgroupOrCaption(_, index, parent) {\n  const next = siblingAfter(parent, index, true)\n  return (\n    !next ||\n    (next.type !== 'comment' &&\n      !(next.type === 'text' && whitespace(next.value.charAt(0))))\n  )\n}\n\n/**\n * Whether to omit `</html>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction html(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</body>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction body(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</p>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\n// eslint-disable-next-line complexity\nfunction p(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return next\n    ? next.type === 'element' &&\n        (next.tagName === 'address' ||\n          next.tagName === 'article' ||\n          next.tagName === 'aside' ||\n          next.tagName === 'blockquote' ||\n          next.tagName === 'details' ||\n          next.tagName === 'div' ||\n          next.tagName === 'dl' ||\n          next.tagName === 'fieldset' ||\n          next.tagName === 'figcaption' ||\n          next.tagName === 'figure' ||\n          next.tagName === 'footer' ||\n          next.tagName === 'form' ||\n          next.tagName === 'h1' ||\n          next.tagName === 'h2' ||\n          next.tagName === 'h3' ||\n          next.tagName === 'h4' ||\n          next.tagName === 'h5' ||\n          next.tagName === 'h6' ||\n          next.tagName === 'header' ||\n          next.tagName === 'hgroup' ||\n          next.tagName === 'hr' ||\n          next.tagName === 'main' ||\n          next.tagName === 'menu' ||\n          next.tagName === 'nav' ||\n          next.tagName === 'ol' ||\n          next.tagName === 'p' ||\n          next.tagName === 'pre' ||\n          next.tagName === 'section' ||\n          next.tagName === 'table' ||\n          next.tagName === 'ul')\n    : !parent ||\n        // Confusing parent.\n        !(\n          parent.type === 'element' &&\n          (parent.tagName === 'a' ||\n            parent.tagName === 'audio' ||\n            parent.tagName === 'del' ||\n            parent.tagName === 'ins' ||\n            parent.tagName === 'map' ||\n            parent.tagName === 'noscript' ||\n            parent.tagName === 'video')\n        )\n}\n\n/**\n * Whether to omit `</li>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction li(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'li')\n}\n\n/**\n * Whether to omit `</dt>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dt(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    next &&\n    next.type === 'element' &&\n    (next.tagName === 'dt' || next.tagName === 'dd')\n  )\n}\n\n/**\n * Whether to omit `</dd>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dd(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd'))\n  )\n}\n\n/**\n * Whether to omit `</rt>` or `</rp>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction rubyElement(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'rp' || next.tagName === 'rt'))\n  )\n}\n\n/**\n * Whether to omit `</optgroup>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction optgroup(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'optgroup')\n}\n\n/**\n * Whether to omit `</option>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction option(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'option' || next.tagName === 'optgroup'))\n  )\n}\n\n/**\n * Whether to omit `</menuitem>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction menuitem(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'menuitem' ||\n        next.tagName === 'hr' ||\n        next.tagName === 'menu'))\n  )\n}\n\n/**\n * Whether to omit `</thead>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction thead(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    next &&\n    next.type === 'element' &&\n    (next.tagName === 'tbody' || next.tagName === 'tfoot')\n  )\n}\n\n/**\n * Whether to omit `</tbody>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tbody(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot'))\n  )\n}\n\n/**\n * Whether to omit `</tfoot>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tfoot(_, index, parent) {\n  return !siblingAfter(parent, index)\n}\n\n/**\n * Whether to omit `</tr>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tr(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'tr')\n}\n\n/**\n * Whether to omit `</td>` or `</th>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction cells(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'td' || next.tagName === 'th'))\n  )\n}\n","/**\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Content} Content\n */\n\nimport {whitespace} from 'hast-util-whitespace'\nimport {siblingBefore, siblingAfter} from './util/siblings.js'\nimport {closing} from './closing.js'\nimport {omission} from './omission.js'\n\nexport const opening = omission({\n  html,\n  head,\n  body,\n  colgroup,\n  tbody\n})\n\n/**\n * Whether to omit `<html>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction html(node) {\n  const head = siblingAfter(node, -1)\n  return !head || head.type !== 'comment'\n}\n\n/**\n * Whether to omit `<head>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction head(node) {\n  const children = node.children\n  /** @type {Array<string>} */\n  const seen = []\n  let index = -1\n\n  while (++index < children.length) {\n    const child = children[index]\n    if (\n      child.type === 'element' &&\n      (child.tagName === 'title' || child.tagName === 'base')\n    ) {\n      if (seen.includes(child.tagName)) return false\n      seen.push(child.tagName)\n    }\n  }\n\n  return children.length > 0\n}\n\n/**\n * Whether to omit `<body>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction body(node) {\n  const head = siblingAfter(node, -1, true)\n\n  return (\n    !head ||\n    (head.type !== 'comment' &&\n      !(head.type === 'text' && whitespace(head.value.charAt(0))) &&\n      !(\n        head.type === 'element' &&\n        (head.tagName === 'meta' ||\n          head.tagName === 'link' ||\n          head.tagName === 'script' ||\n          head.tagName === 'style' ||\n          head.tagName === 'template')\n      ))\n  )\n}\n\n/**\n * Whether to omit `<colgroup>`.\n * The spec describes some logic for the opening tag, but it’s easier to\n * implement in the closing tag, to the same effect, so we handle it there\n * instead.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction colgroup(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1, true)\n\n  // Previous colgroup was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    previous.tagName === 'colgroup' &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return head && head.type === 'element' && head.tagName === 'col'\n}\n\n/**\n * Whether to omit `<tbody>`.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction tbody(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1)\n\n  // Previous table section was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    (previous.tagName === 'thead' || previous.tagName === 'tbody') &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return head && head.type === 'element' && head.tagName === 'tr'\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n * @typedef {import('../types.js').PropertyValue} PropertyValue\n */\n\nimport {ccount} from 'ccount'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {svg, find} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringifyEntities} from 'stringify-entities'\nimport {opening} from '../omission/opening.js'\nimport {closing} from '../omission/closing.js'\n\n/**\n * Maps of subsets.\n *\n * Each value is a matrix of tuples.\n * The value at `0` causes parse errors, the value at `1` is valid.\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\n *\n * @type {Record<'name' | 'unquoted' | 'single' | 'double', Array<[Array<string>, Array<string>]>>}\n */\nconst constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [\n    ['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [\n    ['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [\n    [\"&'\".split(''), '\"&\\'`'.split('')],\n    [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [\n    ['\"&'.split(''), '\"&\\'`'.split('')],\n    ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]\n  ]\n}\n\n/**\n * Serialize an element node.\n *\n * @param {Element} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\n// eslint-disable-next-line complexity\nexport function element(node, index, parent, state) {\n  const schema = state.schema\n  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags\n  let selfClosing =\n    schema.space === 'svg'\n      ? state.settings.closeEmptyElements\n      : state.settings.voids.includes(node.tagName.toLowerCase())\n  /** @type {Array<string>} */\n  const parts = []\n  /** @type {string} */\n  let last\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    state.schema = svg\n  }\n\n  const attrs = serializeAttributes(state, node.properties)\n\n  const content = state.all(\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  )\n\n  state.schema = schema\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  if (content) selfClosing = false\n\n  if (attrs || !omit || !opening(node, index, parent)) {\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '')\n\n    if (\n      selfClosing &&\n      (schema.space === 'svg' || state.settings.closeSelfClosing)\n    ) {\n      last = attrs.charAt(attrs.length - 1)\n      if (\n        !state.settings.tightSelfClosing ||\n        last === '/' ||\n        (last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ')\n      }\n\n      parts.push('/')\n    }\n\n    parts.push('>')\n  }\n\n  parts.push(content)\n\n  if (!selfClosing && (!omit || !closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>')\n  }\n\n  return parts.join('')\n}\n\n/**\n * @param {State} state\n * @param {Properties | null | undefined} props\n * @returns {string}\n */\nfunction serializeAttributes(state, props) {\n  /** @type {Array<string>} */\n  const values = []\n  let index = -1\n  /** @type {string} */\n  let key\n\n  if (props) {\n    for (key in props) {\n      if (props[key] !== undefined && props[key] !== null) {\n        const value = serializeAttribute(state, key, props[key])\n        if (value) values.push(value)\n      }\n    }\n  }\n\n  while (++index < values.length) {\n    const last = state.settings.tightAttributes\n      ? values[index].charAt(values[index].length - 1)\n      : null\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' '\n    }\n  }\n\n  return values.join('')\n}\n\n/**\n * @param {State} state\n * @param {string} key\n * @param {PropertyValue} value\n * @returns {string}\n */\n// eslint-disable-next-line complexity\nfunction serializeAttribute(state, key, value) {\n  const info = find(state.schema, key)\n  const x =\n    state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1\n  const y = state.settings.allowDangerousCharacters ? 0 : 1\n  let quote = state.quote\n  /** @type {string | undefined} */\n  let result\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true\n  } else if (\n    info.boolean ||\n    (info.overloadedBoolean && typeof value !== 'string')\n  ) {\n    value = Boolean(value)\n  }\n\n  if (\n    value === undefined ||\n    value === null ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return ''\n  }\n\n  const name = stringifyEntities(\n    info.attribute,\n    Object.assign({}, state.settings.characterReferences, {\n      // Always encode without parse errors in non-HTML.\n      subset: constants.name[x][y]\n    })\n  )\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\n  // so I can’t test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  value = Array.isArray(value)\n    ? (info.commaSeparated ? commas : spaces)(value, {\n        padLeft: !state.settings.tightCommaSeparatedLists\n      })\n    : String(value)\n\n  if (state.settings.collapseEmptyAttributes && !value) return name\n\n  // Check unquoted value.\n  if (state.settings.preferUnquoted) {\n    result = stringifyEntities(\n      value,\n      Object.assign({}, state.settings.characterReferences, {\n        subset: constants.unquoted[x][y],\n        attribute: true\n      })\n    )\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (\n      state.settings.quoteSmart &&\n      ccount(value, quote) > ccount(value, state.alternative)\n    ) {\n      quote = state.alternative\n    }\n\n    result =\n      quote +\n      stringifyEntities(\n        value,\n        Object.assign({}, state.settings.characterReferences, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[x][y],\n          attribute: true\n        })\n      ) +\n      quote\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Raw} Raw\n * @typedef {import('../types.js').Text} Text\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n/**\n * Serialize a text node.\n *\n * @param {Text | Raw} node\n *   Node to handle.\n * @param {number | undefined} _\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function text(node, _, parent, state) {\n  // Check if content of `node` should be escaped.\n  return parent &&\n    parent.type === 'element' &&\n    (parent.tagName === 'script' || parent.tagName === 'style')\n    ? node.value\n    : stringifyEntities(\n        node.value,\n        Object.assign({}, state.settings.characterReferences, {\n          subset: ['<', '&']\n        })\n      )\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n */\n\nimport {zwitch} from 'zwitch'\nimport {comment} from './comment.js'\nimport {doctype} from './doctype.js'\nimport {element} from './element.js'\nimport {raw} from './raw.js'\nimport {root} from './root.js'\nimport {text} from './text.js'\n\n/**\n * @type {(node: Node, index: number | undefined, parent: Parent | undefined, state: State) => string}\n */\nexport const handle = zwitch('type', {\n  invalid,\n  unknown,\n  handlers: {comment, doctype, element, raw, root, text}\n})\n\n/**\n * Fail when a non-node is found in the tree.\n *\n * @param {unknown} node\n *   Unknown value.\n * @returns {never}\n *   Never.\n */\nfunction invalid(node) {\n  throw new Error('Expected node, not `' + node + '`')\n}\n\n/**\n * Fail when a node with an unknown type is found in the tree.\n *\n * @param {unknown} node\n *  Unknown node.\n * @returns {never}\n *   Never.\n */\nfunction unknown(node) {\n  // @ts-expect-error: `type` is defined.\n  throw new Error('Cannot compile unknown node `' + node.type + '`')\n}\n","/**\n * @typedef {import('../types.js').Comment} Comment\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n/**\n * Serialize a comment.\n *\n * @param {Comment} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parent | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function comment(node, _1, _2, state) {\n  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>\n  return state.settings.bogusComments\n    ? '<?' +\n        stringifyEntities(\n          node.value,\n          Object.assign({}, state.settings.characterReferences, {subset: ['>']})\n        ) +\n        '>'\n    : '<!--' + node.value.replace(/^>|^->|<!--|-->|--!>|<!-$/g, encode) + '-->'\n\n  /**\n   * @param {string} $0\n   */\n  function encode($0) {\n    return stringifyEntities(\n      $0,\n      Object.assign({}, state.settings.characterReferences, {\n        subset: ['<', '>']\n      })\n    )\n  }\n}\n","/**\n * @typedef {import('../types.js').DocType} DocType\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize a doctype.\n *\n * @param {DocType} _1\n *   Node to handle.\n * @param {number | undefined} _2\n *   Index of `node` in `parent.\n * @param {Parent | undefined} _3\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function doctype(_1, _2, _3, state) {\n  return (\n    '<!' +\n    (state.settings.upperDoctype ? 'DOCTYPE' : 'doctype') +\n    (state.settings.tightDoctype ? '' : ' ') +\n    'html>'\n  )\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Raw} Raw\n */\n\nimport {text} from './text.js'\n\n/**\n * Serialize a raw node.\n *\n * @param {Raw} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function raw(node, index, parent, state) {\n  return state.settings.allowDangerousHtml\n    ? node.value\n    : text(node, index, parent, state)\n}\n","/**\n * @typedef {import('../types.js').Root} Root\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize a root.\n *\n * @param {Root} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parent | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function root(node, _1, _2, state) {\n  return state.all(node)\n}\n","/**\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').Content} Content\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').State} State\n */\n\nimport {html, svg} from 'property-information'\nimport {htmlVoidElements} from 'html-void-elements'\nimport {handle} from './handle/index.js'\n\n/**\n * Serialize hast as HTML.\n *\n * @param {Node | Array<Content>} tree\n *   Tree to serialize.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {string}\n *   Serialized HTML.\n */\n// eslint-disable-next-line complexity\nexport function toHtml(tree, options) {\n  const options_ = options || {}\n  const quote = options_.quote || '\"'\n  const alternative = quote === '\"' ? \"'\" : '\"'\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`')\n  }\n\n  /** @type {State} */\n  const state = {\n    one,\n    all,\n    settings: {\n      omitOptionalTags: options_.omitOptionalTags || false,\n      allowParseErrors: options_.allowParseErrors || false,\n      allowDangerousCharacters: options_.allowDangerousCharacters || false,\n      quoteSmart: options_.quoteSmart || false,\n      preferUnquoted: options_.preferUnquoted || false,\n      tightAttributes: options_.tightAttributes || false,\n      upperDoctype: options_.upperDoctype || false,\n      tightDoctype: options_.tightDoctype || false,\n      bogusComments: options_.bogusComments || false,\n      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,\n      tightSelfClosing: options_.tightSelfClosing || false,\n      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,\n      allowDangerousHtml: options_.allowDangerousHtml || false,\n      voids: options_.voids || htmlVoidElements,\n      characterReferences:\n        options_.characterReferences || options_.entities || {},\n      closeSelfClosing: options_.closeSelfClosing || false,\n      closeEmptyElements: options_.closeEmptyElements || false\n    },\n    schema: options_.space === 'svg' ? svg : html,\n    quote,\n    alternative\n  }\n\n  return state.one(\n    Array.isArray(tree) ? {type: 'root', children: tree} : tree,\n    undefined,\n    undefined\n  )\n}\n\n/**\n * Serialize a node.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Node} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(node, index, parent) {\n  return handle(node, index, parent, this)\n}\n\n/**\n * Serialize all children of `parent`.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent | undefined} parent\n *   Parent whose children to serialize.\n * @returns {string}\n */\nexport function all(parent) {\n  /** @type {Array<string>} */\n  const results = []\n  const children = (parent && parent.children) || []\n  let index = -1\n\n  while (++index < children.length) {\n    results[index] = this.one(children[index], index, parent)\n  }\n\n  return results.join('')\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {Root|Root['children'][number]} Node\n * @typedef {import('hast-util-to-html').Options} Options\n */\n\nimport {toHtml} from 'hast-util-to-html'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?]|Array<void>, Node, string>}\n */\nexport default function rehypeStringify(config) {\n  const processorSettings = /** @type {Options} */ (this.data('settings'))\n  const settings = Object.assign({}, processorSettings, config)\n\n  Object.assign(this, {Compiler: compiler})\n\n  /**\n   * @type {import('unified').CompilerFunction<Node, string>}\n   */\n  function compiler(tree) {\n    return toHtml(tree, settings)\n  }\n}\n"],"names":["htmlVoidElements","whitespace","thing","value","type","replace","siblingAfter","siblings","siblingBefore","increment","parent","index","includeWhitespace","children","offset","next","own","hasOwnProperty","omission","handlers","node","call","tagName","closing","html","_","head","headOrColgroupOrCaption","body","p","li","dt","dd","rt","rubyElement","rp","optgroup","option","menuitem","colgroup","caption","thead","tbody","tfoot","tr","td","cells","th","charAt","opening","seen","length","child","includes","push","previous","indexOf","constants","name","split","unquoted","single","double","serializeAttribute","state","key","info","find","schema","x","settings","allowParseErrors","space","y","allowDangerousCharacters","result","quote","overloadedBoolean","attribute","boolean","Boolean","undefined","Number","isNaN","stringifyEntities","Object","assign","characterReferences","subset","Array","isArray","commaSeparated","commas","spaces","padLeft","tightCommaSeparatedLists","String","collapseEmptyAttributes","preferUnquoted","quoteSmart","ccount","alternative","text","handle","zwitch","invalid","Error","unknown","comment","_1","_2","bogusComments","$0","doctype","_3","upperDoctype","tightDoctype","element","omit","omitOptionalTags","selfClosing","closeEmptyElements","voids","toLowerCase","parts","last","svg","attrs","props","values","tightAttributes","join","serializeAttributes","properties","content","all","closeSelfClosing","tightSelfClosing","raw","allowDangerousHtml","root","one","this","results","rehypeStringify","config","processorSettings","data","Compiler","tree","options","options_","entities","toHtml"],"sourceRoot":""}