{"version":3,"file":"static/js/240.4fa16832.chunk.js","mappings":"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","sources":["../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/preprocess.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark/lib/parse.js","../node_modules/remark-parse/lib/index.js","../node_modules/unist-util-stringify-position/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n"],"names":["emptyOptions","toString","value","options","settings","one","includeImageAlt","includeHtml","Boolean","node","type","alt","all","children","Array","isArray","values","result","index","length","join","content","tokenize","effects","contentStart","attempt","this","parser","constructs","contentInitial","code","consume","enter","exit","factorySpace","lineStart","previous","token","contentType","next","data","markdownLineEnding","document","self","stack","childFlow","childToken","lineStartOffset","continued","start","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","undefined","closeFlow","indexBeforeExits","events","point","indexBeforeFlow","end","exitContainers","Object","assign","splice","slice","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","line","offset","containerContinue","push","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","size","entry","call","ok","nok","disable","null","includes","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","parameters","subevents","more","_isInFirstContentOfListItem","subcontent","_container","unshift","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","pop","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","partial","initial","blankLine","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","text","field","notText","atBreak","list","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","column","_index","_bufferIndex","createTokenizer","initialize","from","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","info","addResult","onsuccessfulcheck","expandTabs","atTab","String","fromCharCode","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","name","create","resolveTo","thematicBreak","marker","before","sequence","markdownSpace","initialSize","kind","asciiDigit","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","after","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","max","limit","Number","POSITIVE_INFINITY","balance","enclosedBefore","asciiControl","raw","enclosed","enclosedEscape","markdownLineEndingOrSpace","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","definition","identifier","labelAfter","normalizeIdentifier","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","asciiAlpha","tagName","commentOpenInside","cdataOpenInside","slash","toLowerCase","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","asciiAlphanumeric","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","characterReference","test","numeric","asciiHexDigit","decodeNamedCharacterReference","characterEscape","asciiPunctuation","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","attentionMarkers","classifyCharacter","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","asciiAtext","emailLabel","emailValue","htmlText","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","search","own","hasOwnProperty","fromMarkdown","encoding","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tree","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","position","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","key","and","errorHandler","onExitError","Error","stringifyPosition","parseInt","lang","replace","title","url","depth","referenceType","ancestor","decodeString","fragment","decodeNumericCharacterReference","ordered","spread","checked","compiler","postprocess","combineExtensions","defaultConstructs","extensions","parse","atCarriageReturn","match","endPosition","lastIndex","exec","Math","ceil","preprocess","d","combined","extension","right","left","remarkParse","Parser","doc","pos"],"sourceRoot":""}