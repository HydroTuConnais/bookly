{"version":3,"file":"static/js/516.1bbb83e9.chunk.js","mappings":"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","sources":["../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-to-markdown/lib/util/association.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/mdast-util-to-markdown/lib/util/container-flow.js","../node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","../node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-to-markdown/lib/util/safe.js","../node_modules/mdast-util-to-markdown/lib/util/track.js","../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../node_modules/micromark-extension-gfm-table/lib/infer.js","../node_modules/micromark-extension-gfm-table/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/mdast-util-find-and-replace/node_modules/unist-util-is/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/index.js","../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../node_modules/mdast-util-gfm-footnote/lib/index.js","../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../node_modules/markdown-table/index.js","../node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../node_modules/remark-gfm/index.js","../node_modules/micromark-extension-gfm/index.js","../node_modules/mdast-util-gfm/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n// To do: next major: expose functions that yields extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * autolink literal syntax.\n *\n * @type {Extension}\n */\nexport const gfmAutolinkLiteral = {\n  text\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde.\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {void}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: not used here.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {void}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {void}\n   */\n  consume(events) {\n    this.map.sort((a, b) => a[0] - b[0])\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]))\n      // eslint-disable-next-line unicorn/no-array-push-push\n      vecs.push(this.map[index][2])\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {void}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       console.log('to do: links?', add, rmCurr)\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'left' | 'center' | 'right' | 'none'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {Array<Align>}\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n// To do: next major: expose functions.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * table syntax.\n *\n * @type {Extension}\n */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolveAll: resolveTable\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n// eslint-disable-next-line complexity\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/// Generate a cell.\n/**\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {Range} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {readonly Point}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n// To do: next major: expose function to make extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions`, to\n * enable GFM task list items syntax.\n *\n * @type {Extension}\n */\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n// To do: next major: expose functions instead of extensions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Link | Array<PhrasingContent> | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration.\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n"],"names":["inlineCode","node","_","state","value","sequence","index","RegExp","test","unsafe","length","pattern","expression","patternCompile","match","atBreak","exec","position","charCodeAt","slice","peek","listItem","parent","info","listItemIndent","style","options","Error","checkListItemIndent","bullet","bulletCurrent","checkBullet","type","ordered","start","incrementListMarker","children","indexOf","size","spread","Math","ceil","tracker","createTracker","move","repeat","shift","exit","enter","indentLines","containerFlow","current","line","blank","association","label","identifier","decodeString","marker","indexStack","results","push","child","handle","_objectSpread","before","after","bulletLastUsed","undefined","between","pop","join","left","right","result","containerPhrasing","handlers","charAt","replace","eol","map","one","_compiled","character","patternInScope","stack","listInScope","inConstruct","notInConstruct","list","none","includes","safe","input","config","positions","infos","Boolean","sort","numerical","end","escapeBackslashes","encode","toString","toUpperCase","a","b","whole","track","now","lineShift","column","chunks","split","tail","wwwPrefix","tokenize","effects","ok","nok","wwwPrefixInside","code","consume","wwwPrefixAfter","partial","domain","underscoreInLastSegment","underscoreInLastLastSegment","seen","domainInside","check","trail","domainAfter","domainAtPunctuation","markdownLineEndingOrSpace","unicodeWhitespace","unicodePunctuation","path","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","asciiAlpha","trailCharRefInside","emailDomainDotTrail","asciiAlphanumeric","wwwAutolink","self","this","previousWww","call","previous","previousUnbalanced","events","attempt","wwwAfter","protocolAutolink","buffer","previousProtocol","String","fromCodePoint","protocolPrefixInside","protocol","toLowerCase","protocolSlashesInside","afterProtocol","asciiControl","protocolAfter","emailAutolink","dot","data","gfmAtext","previousEmail","atext","emailDomain","emailDomainAfter","emailDomainDot","text","gfmAutolinkLiteral","token","_balanced","_gfmAutolinkLiteralWalkedInto","indent","factorySpace","sliceSerialize","tokenizePotentialGfmFootnoteCall","defined","parser","gfmFootnotes","labelStart","id","normalizeIdentifier","codePointAt","resolveToPotentialGfmFootnoteCall","context","Object","assign","offset","_bufferIndex","string","chunk","contentType","replacement","splice","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","_container","labelAtMarker","labelInside","labelAfter","labelEscape","whitespaceAfter","tokenizeDefinitionContinuation","blankLine","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","tokenizer","more","classifyCharacter","_open","_close","resolveAll","open","strikethrough","nextEvents","insideSpan","constructs","null","attentionMarkers","EditMap","constructor","add","remove","editMap","at","addImpl","vecs","gfmTableAlign","inDelimiterRow","align","event","alignIndex","gfmTable","flow","sizeB","next","bodyRowStart","headRowBefore","lazy","headRowBreak","headRowStart","markdownLineEnding","interrupt","headDelimiterStart","markdownSpace","headRowData","headRowEscape","headDelimiterBefore","disable","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","cell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","_align","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","table","tableBody","exits","related","side","tasklistCheck","_gfmTasklistFirstContentOfListItem","inside","close","spaceThenNonSpace","gfmTaskListItem","convert","castFactory","typeFactory","Array","isArray","tests","checks","any","_len","arguments","parameters","_key","anyFactory","all","key","propsFactory","_len2","_key2","CONTINUE","EXIT","visitParents","tree","visitor","reverse","is","step","factory","parents","name","tagName","defineProperty","visit","subresult","grandparents","toResult","concat","own","hasOwnProperty","findAndReplace","find","settings","schema","ignored","ignore","pairs","TypeError","toExpression","toFunction","toPairs","pairIndex","grandparent","change","nodes","lastIndex","matchObject","global","handler","escape","gfmAutolinkLiteralFromMarkdown","transforms","findUrl","findEmail","literalAutolink","title","url","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","autolinkEmail","autolinkProtocol","gfmAutolinkLiteralToMarkdown","prefix","parts","isCorrectDomain","trailExec","closingParenIndex","openingParens","ccount","closingParens","splitUrl","email","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","resume","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","footnoteReference","safeOptions","subexit","footnoteDefinition","handleDelete","gfmStrikethroughFromMarkdown","canContainEols","gfmStrikethroughToMarkdown","delete","defaultStringLength","toAlignment","gfmTableFromMarkdown","d","setData","tableData","enterCell","tableHeader","tableRow","codeText","getData","$0","$1","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","tableCell","handleTableCell","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","max","lines","delimiterStart","delimiterEnd","markdownTable","gfmTaskListItemFromMarkdown","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","paragraph","checked","head","siblings","firstParaghraph","sibling","gfmTaskListItemToMarkdown","checkable","checkbox","remarkGfm","field","combineExtensions","document","continuation","resolveTo","gfm","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","extensions","gfmToMarkdown"],"sourceRoot":""}