import React, { useState } from "react";
import { useDocuments } from "@/context/useDocuments";
import { cn } from "@/lib/utils";
import { ChevronsRight, ChevronDown, ChevronRight, LucideIcon, Plus } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";

interface ItemProps {
    id?: string;
    documentIcon?: string;
    active?: boolean;
    expanded?: boolean;
    isSearch?: boolean;
    level?: number;
    onExpand?: () => void;
    label: string;
    onClick: () => void;
    icon: React.ElementType;
}

export const ItemHead = ({
    id,
    label,
    onClick,
    icon: Icon,
    active,
    documentIcon,
    isSearch,
    level = 0,
    onExpand,
    expanded,
}: ItemProps) => {
    const { createDocument } = useDocuments();
    const navigate = useNavigate();
    const [isHovered, setIsHovered] = useState(false);

    const handleExpand = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {
        event.stopPropagation();
        onExpand?.();
    };

    const onCreate = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {
        console.log(id);
        event.stopPropagation();
        if (!id) return;
        const promise = createDocument({ title: "New Document", parentDocumentId: id })
            .then((documentId) => {
                if (!expanded) {
                    onExpand?.();
                }
                console.log(documentId);

                //navigate(`/documents/${documentId}`);
            });

        toast.promise(promise, {
            loading: "Creating document...",
            success: "Document created",
            error: "Error creating document"
        });
    };

    const CheveronIcon = expanded ? ChevronDown : ChevronRight;

    return (
        <div
            onClick= { onClick }
    role = "button"
    style = {{
        paddingLeft: level ? `${(level * 12) + 12}px` : "12px"
    }
}
className = {
    cn(
                "group min-h-[27px] text-sm py-1 pr-3 w-full hover:bg-primary/5 flex items-center text-muted-foreground font-medium",
        active && "bg-primary/5 text-primary"
            )}
onMouseEnter = {() => setIsHovered(true)}
onMouseLeave = {() => setIsHovered(false)}
        >
    {!!id && (
        <div
                    role="button"
className = {
    cn(
                        "h-full rounded-sm mr-1 transition-opacity ease-in-out duration-200",
                        !isHovered? "opacity-100" : "opacity-0"
    )
}
onClick = { handleExpand }
    >
    <CheveronIcon className="h-4 w-4 shrink-0 text-muted-foreground" />
        </div>
            )}

{
    documentIcon ? (
        <div className= "shrink-0 h-[18px]" >
        { documentIcon }
        </div>
            ) : (
        <Icon className= {
            cn("shrink-0 h-[18px] mr-2 text-muted-foreground",
                    !isHovered? "opacity-100" : "opacity-0")
        } />
            )
}
<span className="truncate" > { label } </span>
{
    isSearch && (
        <kbd className="ml-auto pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-100" >
            <span className="text-xs" >âŠž</span>+ C
                </kbd>
            )
}
{
    !!id && (
        <div className="ml-auto flex items-center gap-x-2" >
            <div
                        role="button"
    onClick = { onCreate }
    className = "opacity-0 group-hover:opacity-100 h-full ml-auto rounded-sm hover:bg-neutral-300 dark:bg-neutral-600"
        >
        <Plus className="h-4 w-4 text-muted-foreground" />
            </div>
            </div>
            )
}
</div>
    );
};
